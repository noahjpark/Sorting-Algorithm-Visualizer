{"version":3,"sources":["Algorithms/SortingAlgorithms.js","Visualizer/Visualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["getSortAnimations","arr","algorithm","animations","copy","i","length","sort","a","b","getSortedArray","n","min","j","push","swap","selectionSort","insertionSort","sorted","end","bubbleSort","mergeSort","quickSort","idx","freq","countingSort","Math","floor","heapify","heapSort","max","findMax","countingSortRadix","radixSort","temp","k","shellSort","start","cocktailShakerSort","gnomeSort","bitonicSort","gap","nextGap","combSort","flip","pancakeSort","console","log","areEqual","left","right","mid","n1","n2","t1","t2","merge","p","pivot","partition","largest","l","r","exp","res","counts","low","count","dir","bitonicMerge","bitonicSwap","parseInt","UNSORTED","COMPARE","SORTED","MOVED","SCANNED","CONTRAST","Visualizer","props","state","array","speed","inProgress","handleSizeChange","bind","handleSpeedChange","this","makeArray","event","target","value","setState","alg","bars","random","ceil","sizeIsPowerOfTwo","setTimeout","bstyle","style","backgroundColor","reset","markAsFinished","markInProgress","document","getElementsByClassName","b1idx","b2idx","c","b1style","b2style","color","height","s","markAsSorted","bidx","findNearestPowerOfTwo","numWidth","window","innerWidth","numMargin","getMargin","id","className","onClick","type","onChange","direction","map","paddingBottom","width","marginLeft","marginRight","visualizeSelectionSort","visualizeInsertionSort","visualizeBubbleSort","visualizeMergeSort","visualizeQuickSort","visualizeCountingSort","visualizeHeapSort","visualizeRadixSort","visualizeShellSort","visualizeCocktailShakerSort","visualizeGnomeSort","visualizeBitonicSort","visualizeCombSort","visualizePancakeSort","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.c96c2817.chunk.js","sourcesContent":["// Driver function calls the appropriate sorting algorithm and checks to make sure it worked by outputting the log of the compared result\r\nexport function getSortAnimations(arr, algorithm) {\r\n    const animations = [];\r\n    const copy = getSortedArray(arr);\r\n\r\n    if (algorithm === \"Selection\") selectionSort(arr, animations);\r\n    else if (algorithm === \"Insertion\") insertionSort(arr, animations);\r\n    else if (algorithm === \"Bubble\") bubbleSort(arr, animations);\r\n    else if (algorithm === \"Merge\") mergeSort(arr, animations, 0, arr.length - 1);\r\n    else if (algorithm === \"Quick\") quickSort(arr, animations, 0, arr.length - 1);\r\n    else if (algorithm === \"Counting\") countingSort(arr, animations);\r\n    else if (algorithm === \"Heap\") heapSort(arr, animations);\r\n    else if (algorithm === \"Radix\") radixSort(arr, animations);\r\n    else if (algorithm === \"Shell\") shellSort(arr, animations);\r\n    else if (algorithm === \"Cocktail\") cocktailShakerSort(arr, animations);\r\n    else if (algorithm === \"Gnome\") gnomeSort(arr, animations);\r\n    else if (algorithm === \"Bitonic\") bitonicSort(arr, animations, 0, arr.length, 1);\r\n    else if (algorithm === \"Comb\") combSort(arr, animations);\r\n    else if (algorithm === \"Pancake\") pancakeSort(arr, animations);\r\n\r\n    console.log(areEqual(copy, arr));\r\n\r\n    return animations;\r\n}\r\n\r\n// Selection Sort algorithm\r\nfunction selectionSort(arr, animations) {\r\n    const n = arr.length;\r\n\r\n    for (let i = 0; i < n; i++) {\r\n        let min = i;\r\n\r\n        for (let j = i + 1; j < n; j++) {\r\n            animations.push([min, j, 0]);\r\n            animations.push([min, j, -1]);\r\n            if (arr[j] < arr[min]) min = j;\r\n        }\r\n\r\n        if (min !== i) {\r\n            swap(arr, i, min);\r\n            animations.push([i, arr[i], 1]);\r\n            animations.push([min, arr[min], 2]);\r\n        }\r\n        else animations.push([i, arr[i], 1]);\r\n    }\r\n}\r\n\r\n// Insertion Sort algorithm\r\nfunction insertionSort(arr, animations) {\r\n    const n = arr.length;\r\n    animations.push([0, arr[0], 1])\r\n\r\n    for (let i = 1; i < n; i++) {\r\n        for (let j = i; j > 0; j--) {\r\n            animations.push([j, j - 1, 0]);\r\n            if (arr[j] > arr[j - 1]) {\r\n                animations.push([j, arr[j], 1]);\r\n                animations.push([j - 1, arr[j - 1], 1]);\r\n                break;\r\n            }\r\n            swap(arr, j, j - 1);\r\n            animations.push([j, arr[j], 1]);\r\n            animations.push([j - 1, arr[j - 1], 1]);\r\n        }\r\n    }\r\n}\r\n\r\n// Bubble Sort algorithm\r\nfunction bubbleSort(arr, animations) {\r\n    const n = arr.length;\r\n    let sorted = false;\r\n\r\n    for (let end = n - 1; !sorted; end--) {\r\n        sorted = true;\r\n\r\n        for (let i = 0; i < end; i++) {\r\n            animations.push([i, i + 1, 0]);\r\n            animations.push([i, i + 1, -1]);\r\n            if (arr[i] > arr[i + 1]) {\r\n                swap(arr, i, i + 1);\r\n                animations.push([i, arr[i], 2]);\r\n                animations.push([i + 1, arr[i + 1], 2]);\r\n                sorted = false;\r\n            }\r\n        }\r\n\r\n        animations.push([end, arr[end], 1]);\r\n    }\r\n}\r\n\r\n// Merge Sort algorithm\r\nfunction mergeSort(arr, animations, left, right) {\r\n    if (left >= right) return;\r\n\r\n    const mid = left + Math.floor((right - left) / 2);\r\n    mergeSort(arr, animations, left, mid);\r\n    mergeSort(arr, animations, mid + 1, right);\r\n    merge(arr, animations, left, mid, right);\r\n}\r\n\r\n// Merge helper to Merge Sort\r\nfunction merge(arr, animations, left, mid, right) {\r\n    let n1 = mid - left + 1, n2 = right - mid;\r\n    let t1 = [], t2 = [];\r\n\r\n    for (let i = 0; i < n1; i++)\r\n        t1[i] = arr[left + i];\r\n\r\n    for (let j = 0; j < n2; j++)\r\n        t2[j] = arr[mid + j + 1];\r\n\r\n    let i = 0, j = 0, idx = left;\r\n    while (i < n1 && j < n2) {\r\n        animations.push([left + i, mid + j + 1, 0]);\r\n        animations.push([left + i, mid + j + 1, -1]);\r\n        arr[idx] = t1[i] < t2[j] ? t1[i++] : t2[j++];\r\n        animations.push([idx, arr[idx++], 1]);\r\n    }\r\n\r\n    while (i < n1) {\r\n        arr[idx] = t1[i++];\r\n        animations.push([idx, arr[idx++], 1]);\r\n    }\r\n\r\n    while (j < n2) {\r\n        arr[idx] = t2[j++];\r\n        animations.push([idx, arr[idx++], 1]);\r\n    }\r\n}\r\n\r\n// Quick Sort algorithm\r\nfunction quickSort(arr, animations, left, right) {\r\n    if (left >= right) return;\r\n\r\n    let p = partition(arr, animations, left, right);\r\n    quickSort(arr, animations, left, p - 1);\r\n    quickSort(arr, animations, p + 1, right);\r\n}\r\n\r\n// Partition helper to Quick Sort\r\nfunction partition(arr, animations, left, right) {\r\n    let pivot = arr[right], i = left;\r\n\r\n    for (let j = left; j < right; j++) {\r\n        animations.push([j, right, 0]);\r\n        animations.push([j, right, -1]);\r\n        if (arr[j] < pivot) {\r\n            swap(arr, i, j);\r\n            animations.push([i, arr[i++], 1]);\r\n        }\r\n    }\r\n\r\n    swap(arr, i, right);\r\n    for (let j = i; j <= right; j++)\r\n        animations.push([j, arr[j], 1]);\r\n    return i;\r\n}\r\n\r\n// Counting Sort algorithm\r\nfunction countingSort(arr, animations) {\r\n    let n = arr.length, idx = 0;\r\n    const freq = [];\r\n\r\n    for (let i = 0; i <= 750; i++)\r\n        freq.push(0);\r\n\r\n    for (let i = 0; i < n; i++) {\r\n        animations.push([i, 0]);\r\n        freq[arr[i]]++;\r\n    }\r\n\r\n    for (let i = 0; i <= 750; i++) {\r\n        while (freq[i] > 0) {\r\n            arr[idx] = i;\r\n            animations.push([idx, arr[idx++], 1]);\r\n            freq[i]--;\r\n        }\r\n    }\r\n}\r\n\r\n// Heap Sort algorithm\r\nfunction heapSort(arr, animations) {\r\n    let n = arr.length;\r\n\r\n    for (let i = Math.floor(n / 2) - 1; i >= 0; i--)\r\n        heapify(arr, animations, n, i);\r\n\r\n    for (let i = n - 1; i > 0; i--) {\r\n        swap(arr, 0, i);\r\n        animations.push([i, arr[i], 1]);\r\n        heapify(arr, animations, i, 0);\r\n    }\r\n\r\n    animations.push([0, arr[0], 1]);\r\n}\r\n\r\n// Heapify helper to Heap Sort\r\nfunction heapify(arr, animations, n, i) {\r\n    let largest = i, l = 2 * i + 1, r = 2 * i + 2;\r\n\r\n    if (l < n) {\r\n        animations.push([l, largest, 0]);\r\n        animations.push([l, largest, -1]);\r\n        if (arr[l] > arr[largest]) largest = l;\r\n    }\r\n    if (r < n) {\r\n        animations.push([r, largest, 0]);\r\n        animations.push([r, largest, -1]);\r\n        if (arr[r] > arr[largest]) largest = r;\r\n    }\r\n\r\n    if (largest !== i) {\r\n        swap(arr, i, largest);\r\n        animations.push([i, arr[i], 2]);\r\n        animations.push([largest, arr[largest], 2]);\r\n        heapify(arr, animations, n, largest);\r\n    }\r\n}\r\n\r\n// Radix Sort\r\nfunction radixSort(arr, animations) {\r\n    let max = arr[findMax(arr, arr.length - 1)];\r\n    for (let i = 1; Math.floor(max / i) > 0; i *= 10)\r\n        countingSortRadix(arr, i, animations);\r\n}\r\n\r\n// Counting Sort helper to Radix Sort\r\nfunction countingSortRadix(arr, exp, animations) {\r\n    let res = [];\r\n    let counts = [];\r\n    const n = arr.length;\r\n\r\n    for (let i = 0; i < n - 1; i++)\r\n        res.push(0);\r\n\r\n    for (let i = 0; i < 10; i++)\r\n        counts.push(0);\r\n\r\n    for (let i = 0; i < n - 1; i++) {\r\n        counts[Math.floor(arr[i] / exp) % 10]++;\r\n        animations.push([i, arr[i], 1]);\r\n    }\r\n    animations.push([n - 1, arr[n - 1], 1]);\r\n\r\n    for (let i = 1; i < 10; i++)\r\n        counts[i] += counts[i - 1];\r\n\r\n    for (let i = n - 2; i >= 0; i--) {\r\n        res[counts[Math.floor(arr[i] / exp) % 10] - 1] = arr[i];\r\n        counts[Math.floor(arr[i] / exp) % 10]--;\r\n    }\r\n\r\n    for (let i = 0; i < n - 1; i++) {\r\n        arr[i] = res[i];\r\n        animations.push([i, arr[i], 2]);\r\n    }\r\n\r\n    animations.push([n - 1, arr[n - 1], 2]);\r\n}\r\n\r\n// Shell Sort algorithm\r\nfunction shellSort(arr, animations) {\r\n    const n = arr.length;\r\n\r\n    for (let i = Math.floor(n / 2); i > 0; i = (Math.floor(i / 2))) {\r\n        for (let j = i; j < n; j++) {\r\n            let temp = arr[j], k = 0;\r\n            animations.push([j, arr[j], 2]);\r\n            animations.push([j, arr[j], 3]);\r\n\r\n            for (k = j; k >= i && arr[k - i] > temp; k -= i) {\r\n                animations.push([k, k - i, 0]);\r\n                animations.push([k, k - i, -1]);\r\n                arr[k] = arr[k - i];\r\n                animations.push([k, arr[k], 1]);\r\n            }\r\n\r\n            arr[k] = temp;\r\n            animations.push([k, arr[k], 1]);\r\n        }\r\n    }\r\n\r\n    animations.push([0, arr[0], 1]);\r\n}\r\n\r\n// Cocktail Shaker Sort algorithm\r\nfunction cocktailShakerSort(arr, animations) {\r\n    let sorted = false;\r\n    let n = arr.length, start = 0, end = n - 1;\r\n\r\n    while (!sorted) {\r\n        sorted = true;\r\n\r\n        for (let i = start; i < end; i++) {\r\n            animations.push([i, i + 1, 0]);\r\n            animations.push([i, i + 1, -1]);\r\n            if (arr[i] > arr[i + 1]) {\r\n                swap(arr, i, i + 1);\r\n                animations.push([i, arr[i], 1]);\r\n                animations.push([i + 1, arr[i + 1], 1]);\r\n                sorted = false;\r\n            }\r\n        }\r\n\r\n        animations.push([end, arr[end--], 2]);\r\n        if (sorted) break;\r\n        sorted = true;\r\n        \r\n        for (let i = end - 1; i >= start; i--) {\r\n            animations.push([i, i + 1, 0]);\r\n            animations.push([i, i + 1, -1]);\r\n            if (arr[i] > arr[i + 1]) {\r\n                swap(arr, i, i + 1);\r\n                animations.push([i, arr[i], 1]);\r\n                animations.push([i + 1, arr[i + 1], 1]);\r\n                sorted = false;\r\n            }\r\n        }\r\n\r\n        animations.push([start, arr[start++], 2]);\r\n    }\r\n}\r\n\r\n// Gnome Sort algorithm\r\nfunction gnomeSort(arr, animations) {\r\n    let i = 0, n = arr.length;\r\n\r\n    while (i < n) {\r\n        if (i === 0) i++;\r\n\r\n        animations.push([i, i - 1, 0]);\r\n        animations.push([i, i - 1, -1]);\r\n        if (arr[i] >= arr[i - 1]) i++;\r\n        else {\r\n            swap(arr, i, i - 1);\r\n            animations.push([i, arr[i--], 1]);\r\n            animations.push([i, arr[i], 1]);\r\n        }\r\n    }\r\n}\r\n\r\n// Bitonic Sort algorithm\r\nfunction bitonicSort(arr, animations, low, count, dir) {\r\n    if (count > 1) {\r\n        let k = Math.floor(count / 2);\r\n\r\n        bitonicSort(arr, animations, low, k, 1);\r\n        bitonicSort(arr, animations, low + k, k, 0);\r\n        bitonicMerge(arr, animations, low, count, dir);\r\n    }\r\n}\r\n\r\n// Bitonic Merge helper to Bitonic Sort\r\nfunction bitonicMerge(arr, animations, low, count, dir) {\r\n    if (count > 1) {\r\n        let k = Math.floor(count / 2);\r\n\r\n        for (let i = low; i < low + k; i++)\r\n            bitonicSwap(arr, animations, i, i + k, dir);\r\n\r\n        bitonicMerge(arr, animations, low, k, dir);\r\n        bitonicMerge(arr, animations, low + k, k, dir);\r\n    }\r\n}\r\n\r\n// Bitonic Swap helper to Bitonic Sort\r\nfunction bitonicSwap(arr, animations, i, j, dir) {\r\n    animations.push([i, j, 0]);\r\n    animations.push([i, j, -1]);\r\n    if ((arr[i] > arr[j] && dir === 1) || (arr[i] < arr[j] && dir === 0)) {\r\n        swap(arr, i, j);\r\n        animations.push([i, arr[i], 1]);\r\n        animations.push([j, arr[j], 1]);\r\n    }\r\n}\r\n\r\n// Comb Sort algorithm\r\nfunction combSort(arr, animations) {\r\n    let n = arr.length, gap = n;\r\n    let sorted = false;\r\n\r\n    while (gap != 1 || !sorted) {\r\n        gap = nextGap(gap);\r\n        sorted = true;\r\n\r\n        for (let i = 0; i < n - gap; i++) {\r\n            animations.push([i, i + gap, 0]);\r\n            animations.push([i, i + gap, -1]);\r\n            if (arr[i] > arr[i + gap]) {\r\n                swap(arr, i, i + gap);\r\n                animations.push([i, arr[i], 1]);\r\n                animations.push([i + gap, arr[i + gap], 1]);\r\n                sorted = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    animations.push([n - 1, arr[n - 1], 1]);\r\n}\r\n\r\n// Pancake Sort algorithm\r\nfunction pancakeSort(arr, animations) {\r\n    animations.push([arr.length - 1, arr[arr.length - 1], 1]);\r\n\r\n    for (let i = arr.length - 1; i > 1; i--) {\r\n        let max = findMax(arr, i);\r\n\r\n        animations.push([max, arr[max], 2]);\r\n\r\n        if (max != i) {\r\n            flip(arr, animations, max);\r\n            flip(arr, animations, i - 1);\r\n        }\r\n\r\n        animations.push([i - 1, arr[i - 1], 1]);\r\n        for (let j = 0; j < i - 1; j++)\r\n            animations.push([j, arr[j], 3]);\r\n    }\r\n\r\n    animations.push([0, arr[0], 1]);\r\n}\r\n\r\n// Flip helper for Pancake Sort\r\nfunction flip(arr, animations, end) {\r\n    for (let i = 0; i <= end; i++, end--) {\r\n        animations.push([i, end, 0]);\r\n        swap(arr, i, end);\r\n        animations.push([i, arr[i], 2]);\r\n        animations.push([end, arr[end], 2]);\r\n    }\r\n}\r\n\r\n// Next Gap helper to Comb Sort\r\nfunction nextGap(gap) {\r\n    gap = parseInt((gap * 10) / 13, 10);\r\n    return gap >= 1 ? gap : 1;\r\n}\r\n\r\n// Finds the max in the array\r\nfunction findMax(arr, n) {\r\n    let max = 0;\r\n    for (let i = 1; i < n; i++)\r\n        if (arr[i] > arr[max]) max = i;\r\n    return max;\r\n}\r\n\r\n// Swaps the values of two indices i and j in the array\r\nfunction swap(arr, i, j) {\r\n    let temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n}\r\n\r\n// Prints the array\r\nfunction print(arr) {\r\n    for (let i = 0; i < arr.length; i++)\r\n        console.log(arr[i]);\r\n}\r\n\r\n// Prints the compared arrays\r\nfunction compare(arr, sorted) {\r\n    for (let i = 0; i < arr.length; i++)\r\n        if (arr[i] !== sorted[i]) console.log(i + \": \" + arr[i] + \" \" + sorted[i]);\r\n}\r\n\r\n// Checks if two arrays are identical\r\nfunction areEqual(arr, sorted) {\r\n    for (let i = 0; i < arr.length; i++)\r\n        if (arr[i] !== sorted[i]) return false;\r\n    return true;\r\n}\r\n\r\n// Makes a copy of the array and sorts it\r\nfunction getSortedArray(arr) {\r\n    let copy = [];\r\n    for (let i = 0; i < arr.length; i++)\r\n        copy[i] = arr[i];\r\n    copy.sort((a, b) => { return a - b });\r\n    return copy;\r\n}","import React from 'react';\r\nimport { getSortAnimations } from '../Algorithms/SortingAlgorithms.js';\r\nimport './Visualizer.css';\r\n\r\nconst UNSORTED = 'black';\r\nconst COMPARE = 'maroon';\r\nconst SORTED = 'seagreen';\r\nconst MOVED = 'mediumslateblue';\r\nconst SCANNED = 'lightseagreen';\r\nconst CONTRAST = 'ivory';\r\n\r\nexport default class Visualizer extends React.Component {\r\n    constructor(props) {\r\n        super (props);\r\n        this.state = {\r\n            array: [],\r\n            speed: 15,\r\n            inProgress: false,\r\n            algorithm: \"\",\r\n        };\r\n        this.handleSizeChange = this.handleSizeChange.bind(this);\r\n        this.handleSpeedChange = this.handleSpeedChange.bind(this);\r\n    }\r\n\r\n    // Initialize array to size 50\r\n    componentDidMount() {\r\n        this.makeArray(49);\r\n    }\r\n\r\n    // Size change\r\n    handleSizeChange(event) {\r\n        this.makeArray(event.target.value);\r\n    }\r\n\r\n    // Speed change\r\n    handleSpeedChange(event) {\r\n        this.setState(() => {\r\n            return { speed: event.target.value };\r\n        });\r\n    }\r\n\r\n    // Marks the state as in progress and updates the current algorithm\r\n    markInProgress(alg) {\r\n        this.setState(() => {\r\n            return { inProgress: true, algorithm: alg };\r\n        });\r\n    }\r\n\r\n    // Marks the state as finished and clears the current algorithm\r\n    markAsFinished() {\r\n        this.setState(() => {\r\n            return { inProgress: false, algorithm: \"\" };\r\n        });\r\n    }\r\n\r\n    // Makes a new array with the given number of bars plus one (a bar of max value is put in its sorted spot at the end for visual assistance) if the state is available\r\n    makeArray(bars) {\r\n        if (!this.state.inProgress) {\r\n            const array = [];\r\n            for (let i = 0; i < bars; i++)\r\n                array.push(randomInt(5, 750));\r\n            array.push(750);\r\n            this.setState(() => {\r\n                return { array: array }; \r\n            });\r\n        }\r\n    }\r\n\r\n    // Checks if the value n is a power of two\r\n    sizeIsPowerOfTwo(n) {\r\n        return parseInt( (Math.ceil((Math.log(n) / Math.log(2))))) === parseInt( (Math.floor(((Math.log(n) / Math.log(2))))));\r\n    }\r\n\r\n    // Finds the nearest power of two to the current array size (helper for bitonic sort)\r\n    findNearestPowerOfTwo() {\r\n        let n = this.state.array.length, l = n - 1, r = n + 1;\r\n\r\n        while (l > 1) {\r\n            if (this.sizeIsPowerOfTwo(l)) return l;\r\n            if (this.sizeIsPowerOfTwo(r)) return r;\r\n\r\n            if (l > 1) l--;\r\n            r++\r\n        }\r\n\r\n        return 2;\r\n    }\r\n\r\n    // Calculates the margin between each bar depending on the array's length\r\n    getMargin() {\r\n        const { array } = this.state;\r\n        return array.length < 5 ?\r\n            10 : array.length < 8 ?\r\n            8 : array.length < 11 ?\r\n            6 : array.length < 20 ?\r\n            4 : array.length < 40 ?\r\n            2.5 : array.length < 100 ?\r\n            1.5 : array.length < 130 ? 1 : 0.5;\r\n    }\r\n\r\n    // Marks the array as sorted (turns green) then calls the reset helper\r\n    markAsSorted(animations, bars) {\r\n        for (let i = 0; i < animations.length; i++) {\r\n            setTimeout(() => {\r\n                const [idx] = animations[i];\r\n                const bstyle = bars[idx].style;\r\n                if (bstyle.backgroundColor !== SORTED) bstyle.backgroundColor = SORTED;\r\n            }, animations.length * this.state.speed);\r\n        }\r\n\r\n        this.reset(animations, bars);\r\n    }\r\n\r\n    // Helper to reset all bars to the original color, black, mark the state as available, and log \"Finished\"\r\n    reset(animations, bars) {\r\n        for (let i = 0; i < animations.length; i++) {\r\n            setTimeout(() => {\r\n                const [idx] = animations[i];\r\n                const bstyle = bars[idx].style;\r\n                bstyle.backgroundColor = UNSORTED;\r\n            }, (animations.length * this.state.speed) + 1500);\r\n        }\r\n        setTimeout(() => {\r\n            this.markAsFinished();\r\n            console.log(\"Finished\");\r\n        }, (animations.length * this.state.speed) + 1501);\r\n    }\r\n\r\n    // Visualizes selection sort\r\n    visualizeSelectionSort() {\r\n        this.markInProgress(\"Selection\");\r\n        setTimeout(() => {\r\n            const animations = getSortAnimations(this.state.array, \"Selection\");\r\n            const bars = document.getElementsByClassName('array-bar');\r\n\r\n            for (let i = 0; i < animations.length; i++) {\r\n                if (animations[i][2] < 1) {\r\n                    const [b1idx, b2idx, c] = animations[i];\r\n                    const b1style = bars[b1idx].style;\r\n                    const b2style = bars[b2idx].style;\r\n                    const color = c === 0 ? COMPARE : UNSORTED;\r\n                    setTimeout(() => {\r\n                        b1style.backgroundColor = color;\r\n                        b2style.backgroundColor = color;\r\n                    }, i * this.state.speed);\r\n                } else {\r\n                    setTimeout(() => {\r\n                        const [idx, height, s] = animations[i];\r\n                        const bstyle = bars[idx].style;\r\n                        bstyle.height = `${height}px`;\r\n                        if (s === 1) bstyle.backgroundColor = MOVED;\r\n                    }, i * this.state.speed);\r\n                }\r\n            }\r\n\r\n            this.markAsSorted(animations, bars);\r\n        }, 100);\r\n    }\r\n\r\n    // Visualizes Insertion sort\r\n    visualizeInsertionSort() {\r\n        this.markInProgress(\"Insertion\");\r\n        setTimeout(() => {\r\n            const animations = getSortAnimations(this.state.array, \"Insertion\");\r\n            const bars = document.getElementsByClassName('array-bar');\r\n\r\n            for (let i = 0; i < animations.length; i++) {\r\n                if (animations[i][2] === 0) {\r\n                    const [b1idx, b2idx, c] = animations[i];\r\n                    const b1style = bars[b1idx].style;\r\n                    const b2style = bars[b2idx].style;\r\n                    const color = c === 0 ? COMPARE : UNSORTED;\r\n                    setTimeout(() => {\r\n                        b1style.backgroundColor = color;\r\n                        b2style.backgroundColor = color;\r\n                    }, i * this.state.speed);\r\n                } else {\r\n                    setTimeout(() => {\r\n                        const [idx, height] = animations[i];\r\n                        const bstyle = bars[idx].style;\r\n                        bstyle.height = `${height}px`;\r\n                        bstyle.backgroundColor = MOVED;\r\n                    }, i * this.state.speed);\r\n                }\r\n            }\r\n\r\n            this.markAsSorted(animations, bars);\r\n        }, 100);\r\n    }\r\n\r\n    // Visualizes Bubble sort\r\n    visualizeBubbleSort() {\r\n        this.markInProgress(\"Bubble\");\r\n        setTimeout(() => {\r\n            const animations = getSortAnimations(this.state.array, \"Bubble\");\r\n            const bars = document.getElementsByClassName('array-bar');\r\n\r\n            for (let i = 0; i < animations.length; i++) {\r\n                if (animations[i][2] < 1) {\r\n                    const [b1idx, b2idx, c] = animations[i];\r\n                    const b1style = bars[b1idx].style;\r\n                    const b2style = bars[b2idx].style;\r\n                    const color = c === 0 ? COMPARE : UNSORTED;\r\n                    setTimeout(() => {\r\n                        b1style.backgroundColor = color;\r\n                        b2style.backgroundColor = color;\r\n                    }, i * this.state.speed);\r\n                } else {\r\n                    setTimeout(() => {\r\n                        const [idx, height, c] = animations[i];\r\n                        const bstyle = bars[idx].style;\r\n                        bstyle.height = `${height}px`;\r\n                        if (c === 1) bstyle.backgroundColor = MOVED;\r\n                    }, i * this.state.speed);\r\n                }\r\n            }\r\n\r\n            this.markAsSorted(animations, bars);\r\n        }, 100);\r\n    }\r\n\r\n    // Visualizes Merge sort\r\n    visualizeMergeSort() {\r\n        this.markInProgress(\"Merge\");\r\n        setTimeout(() => {\r\n            const animations = getSortAnimations(this.state.array, \"Merge\");\r\n            const bars = document.getElementsByClassName('array-bar');\r\n\r\n            for (let i = 0; i < animations.length; i++) {\r\n                if (animations[i][2] < 1) {\r\n                    const [b1idx, b2idx, c] = animations[i];\r\n                    const b1style = bars[b1idx].style;\r\n                    const b2style = bars[b2idx].style;\r\n                    const color = c === 0 ? CONTRAST : MOVED;\r\n                    setTimeout(() => {\r\n                        b1style.backgroundColor = color;\r\n                        b2style.backgroundColor = color;\r\n                    }, i * this.state.speed);\r\n                } else {\r\n                    setTimeout(() => {\r\n                        const [idx, height] = animations[i];\r\n                        const bstyle = bars[idx].style;\r\n                        bstyle.height = `${height}px`;\r\n                        bstyle.backgroundColor = MOVED;\r\n                    }, i * this.state.speed);\r\n                }\r\n            }\r\n\r\n            this.markAsSorted(animations, bars);\r\n        }, 100);\r\n    }\r\n\r\n    // Visualizes Quick sort\r\n    visualizeQuickSort() {\r\n        this.markInProgress(\"Quick\");\r\n        setTimeout(() => {\r\n            const animations = getSortAnimations(this.state.array, \"Quick\");\r\n            const bars = document.getElementsByClassName('array-bar');\r\n\r\n            for (let i = 0; i < animations.length; i++) {\r\n                if (animations[i][2] < 1) {\r\n                    const [b1idx, b2idx, c] = animations[i];\r\n                    const b1style = bars[b1idx].style;\r\n                    const b2style = bars[b2idx].style;\r\n                    const color = c === 0 ? CONTRAST : SCANNED;\r\n                    setTimeout(() => {\r\n                        b1style.backgroundColor = color;\r\n                        b2style.backgroundColor = color;\r\n                    }, i * this.state.speed);\r\n                } else {\r\n                    setTimeout(() => {\r\n                        const [idx, height] = animations[i];\r\n                        const bstyle = bars[idx].style;\r\n                        bstyle.height = `${height}px`;\r\n                        bstyle.backgroundColor = MOVED;\r\n                    }, i * this.state.speed);\r\n                }\r\n            }\r\n\r\n            this.markAsSorted(animations, bars);\r\n        }, 100);\r\n    }\r\n\r\n    // Visualizes Counting sort\r\n    visualizeCountingSort() {\r\n        this.markInProgress(\"Counting\");\r\n        setTimeout(() => {\r\n            const animations = getSortAnimations(this.state.array, \"Counting\");\r\n            const bars = document.getElementsByClassName('array-bar');\r\n\r\n            for (let i = 0; i < animations.length; i++) {\r\n                if (animations[i][1] === 0) {\r\n                    const [bidx] = animations[i];\r\n                    const bstyle = bars[bidx].style;\r\n                    const color = SCANNED;\r\n                    setTimeout(() => {\r\n                        bstyle.backgroundColor = color;\r\n                    }, i * this.state.speed);\r\n                } else {\r\n                    setTimeout(() => {\r\n                        const [idx, height] = animations[i];\r\n                        const bstyle = bars[idx].style;\r\n                        bstyle.height = `${height}px`;\r\n                        bstyle.backgroundColor = MOVED;\r\n                    }, i * this.state.speed);\r\n                }\r\n            }\r\n\r\n            this.markAsSorted(animations, bars);\r\n        }, 100);\r\n    }\r\n\r\n    // Visualizes Heap sort\r\n    visualizeHeapSort() {\r\n        this.markInProgress(\"Heap\");\r\n        setTimeout(() => {\r\n            const animations = getSortAnimations(this.state.array, \"Heap\");\r\n            const bars = document.getElementsByClassName('array-bar');\r\n\r\n            for (let i = 0; i < animations.length; i++) {\r\n                if (animations[i][2] <= 0) {\r\n                    const [b1idx, b2idx, c] = animations[i];\r\n                    const b1style = bars[b1idx].style;\r\n                    const b2style = bars[b2idx].style;\r\n                    const color = c === 0 ? COMPARE : SCANNED;\r\n                    setTimeout(() => {\r\n                        b1style.backgroundColor = color;\r\n                        b2style.backgroundColor = color;\r\n                    }, i * this.state.speed);\r\n                } else {\r\n                    setTimeout(() => {\r\n                        const [idx, height, c] = animations[i];\r\n                        const bstyle = bars[idx].style;\r\n                        bstyle.height = `${height}px`;\r\n                        bstyle.backgroundColor = c === 2 ? SCANNED : MOVED;\r\n                    }, i * this.state.speed);\r\n                }\r\n            }\r\n\r\n            this.markAsSorted(animations, bars);\r\n        }, 100);\r\n    }\r\n\r\n    // Visualizes Radix sort\r\n    visualizeRadixSort() {\r\n        this.markInProgress(\"Radix\");\r\n        setTimeout(() => {\r\n            const animations = getSortAnimations(this.state.array, \"Radix\");\r\n            const bars = document.getElementsByClassName('array-bar');\r\n\r\n            for (let i = 0; i < animations.length; i++) {\r\n                setTimeout(() => {\r\n                    const [idx, height, c] = animations[i];\r\n                    const bstyle = bars[idx].style;\r\n                    bstyle.height = `${height}px`;\r\n                    bstyle.backgroundColor = c === 1 ? SCANNED : MOVED;\r\n                }, i * this.state.speed);\r\n            }\r\n\r\n            this.markAsSorted(animations, bars);\r\n        }, 100);\r\n    }\r\n\r\n    // Visualizes Shell sort\r\n    visualizeShellSort() {\r\n        this.markInProgress(\"Shell\");\r\n        setTimeout(() => {\r\n            const animations = getSortAnimations(this.state.array, \"Shell\");\r\n            const bars = document.getElementsByClassName('array-bar');\r\n\r\n            for (let i = 0; i < animations.length; i++) {\r\n                if (animations[i][2] <= 0) {\r\n                    const [b1idx, b2idx, c] = animations[i];\r\n                    const b1style = bars[b1idx].style;\r\n                    const b2style = bars[b2idx].style;\r\n                    const color = c === 0 ? COMPARE : UNSORTED;\r\n                    setTimeout(() => {\r\n                        b1style.backgroundColor = color;\r\n                        b2style.backgroundColor = color;\r\n                    }, i * this.state.speed);\r\n                } else {\r\n                    setTimeout(() => {\r\n                        const [idx, height, c] = animations[i];\r\n                        const bstyle = bars[idx].style;\r\n                        bstyle.height = `${height}px`;\r\n                        bstyle.backgroundColor = c === 2 ? COMPARE : UNSORTED;\r\n                    }, i * this.state.speed);\r\n                }\r\n            }\r\n\r\n            this.markAsSorted(animations, bars);\r\n        }, 100);\r\n    }\r\n\r\n    // Visualizes Cocktail Shaker sort\r\n    visualizeCocktailShakerSort() {\r\n        this.markInProgress(\"Cocktail\");\r\n        setTimeout(() => {\r\n            const animations = getSortAnimations(this.state.array, \"Cocktail\");\r\n            const bars = document.getElementsByClassName('array-bar');\r\n\r\n            for (let i = 0; i < animations.length; i++) {\r\n                if (animations[i][2] <= 0) {\r\n                    const [b1idx, b2idx, c] = animations[i];\r\n                    const b1style = bars[b1idx].style;\r\n                    const b2style = bars[b2idx].style;\r\n                    const color = c === 0 ? COMPARE : UNSORTED;\r\n                    setTimeout(() => {\r\n                        b1style.backgroundColor = color;\r\n                        b2style.backgroundColor = color;\r\n                    }, i * this.state.speed);\r\n                } else {\r\n                    setTimeout(() => {\r\n                        const [idx, height] = animations[i];\r\n                        const bstyle = bars[idx].style;\r\n                        bstyle.height = `${height}px`;\r\n                    }, i * this.state.speed);\r\n                }\r\n            }\r\n\r\n            this.markAsSorted(animations, bars);\r\n        }, 100);\r\n    }\r\n\r\n    // Visualizes Gnome sort\r\n    visualizeGnomeSort() {\r\n        this.markInProgress(\"Gnome\");\r\n        setTimeout(() => {\r\n            const animations = getSortAnimations(this.state.array, \"Gnome\");\r\n            const bars = document.getElementsByClassName('array-bar');\r\n\r\n            for (let i = 0; i < animations.length; i++) {\r\n                if (animations[i][2] <= 0) {\r\n                    const [b1idx, b2idx, c] = animations[i];\r\n                    const b1style = bars[b1idx].style;\r\n                    const b2style = bars[b2idx].style;\r\n                    const color = c === 0 ? COMPARE : UNSORTED;\r\n                    setTimeout(() => {\r\n                        b1style.backgroundColor = color;\r\n                        b2style.backgroundColor = color;\r\n                    }, i * this.state.speed);\r\n                } else {\r\n                    setTimeout(() => {\r\n                        const [idx, height, c] = animations[i];\r\n                        const bstyle = bars[idx].style;\r\n                        bstyle.height = `${height}px`;\r\n                        bstyle.backgroundColor = c === 1 ? UNSORTED : MOVED;\r\n                    }, i * this.state.speed);\r\n                }\r\n            }\r\n\r\n            this.markAsSorted(animations, bars);\r\n        }, 100);\r\n    }\r\n\r\n    // Visualizes Bitonic sort\r\n    visualizeBitonicSort() {\r\n        if (!this.sizeIsPowerOfTwo(this.state.array.length))\r\n            this.makeArray(this.findNearestPowerOfTwo() - 1);\r\n\r\n        this.markInProgress(\"Bitonic\");\r\n        setTimeout(() => {\r\n            const animations = getSortAnimations(this.state.array, \"Bitonic\");\r\n            const bars = document.getElementsByClassName('array-bar');\r\n\r\n            for (let i = 0; i < animations.length; i++) {\r\n                if (animations[i][2] <= 0) {\r\n                    const [b1idx, b2idx, c] = animations[i];\r\n                    const b1style = bars[b1idx].style;\r\n                    const b2style = bars[b2idx].style;\r\n                    const color = c === 0 ? COMPARE : UNSORTED;\r\n                    setTimeout(() => {\r\n                        b1style.backgroundColor = color;\r\n                        b2style.backgroundColor = color;\r\n                    }, i * this.state.speed);\r\n                } else {\r\n                    setTimeout(() => {\r\n                        const [idx, height] = animations[i];\r\n                        const bstyle = bars[idx].style;\r\n                        bstyle.height = `${height}px`;\r\n                    }, i * this.state.speed);\r\n                }\r\n            }\r\n\r\n            this.markAsSorted(animations, bars);\r\n        }, 100);\r\n    }\r\n\r\n    // Visualizes Comb sort\r\n    visualizeCombSort() {\r\n        this.markInProgress(\"Comb\");\r\n        setTimeout(() => {\r\n            const animations = getSortAnimations(this.state.array, \"Comb\");\r\n            const bars = document.getElementsByClassName('array-bar');\r\n\r\n            for (let i = 0; i < animations.length; i++) {\r\n                if (animations[i][2] <= 0) {\r\n                    const [b1idx, b2idx, c] = animations[i];\r\n                    const b1style = bars[b1idx].style;\r\n                    const b2style = bars[b2idx].style;\r\n                    const color = c === 0 ? COMPARE : UNSORTED;\r\n                    setTimeout(() => {\r\n                        b1style.backgroundColor = color;\r\n                        b2style.backgroundColor = color;\r\n                    }, i * this.state.speed);\r\n                } else {\r\n                    setTimeout(() => {\r\n                        const [idx, height] = animations[i];\r\n                        const bstyle = bars[idx].style;\r\n                        bstyle.height = `${height}px`;\r\n                    }, i * this.state.speed);\r\n                }\r\n            }\r\n\r\n            this.markAsSorted(animations, bars);\r\n        }, 100);\r\n    }\r\n\r\n    // Visualizes Pancake sort\r\n    visualizePancakeSort() {\r\n        this.markInProgress(\"Pancake\");\r\n        setTimeout(() => {\r\n            const animations = getSortAnimations(this.state.array, \"Pancake\");\r\n            const bars = document.getElementsByClassName('array-bar');\r\n\r\n            for (let i = 0; i < animations.length; i++) {\r\n                if (animations[i][2] <= 0) {\r\n                    const [b1idx, b2idx, c] = animations[i];\r\n                    const b1style = bars[b1idx].style;\r\n                    const b2style = bars[b2idx].style;\r\n                    const color = c === 0 ? COMPARE : UNSORTED;\r\n                    setTimeout(() => {\r\n                        b1style.backgroundColor = color;\r\n                        b2style.backgroundColor = color;\r\n                    }, i * this.state.speed);\r\n                } else {\r\n                    setTimeout(() => {\r\n                        const [idx, height, c] = animations[i];\r\n                        const bstyle = bars[idx].style;\r\n                        bstyle.height = `${height}px`;\r\n                        bstyle.backgroundColor = c === 1 ? MOVED : c === 2 ? SCANNED : UNSORTED;\r\n                    }, i * this.state.speed);\r\n                }\r\n            }\r\n\r\n            this.markAsSorted(animations, bars);\r\n        }, 100);\r\n    }\r\n\r\n    // Renders the page\r\n    render() {\r\n        const { array, inProgress, algorithm } = this.state;\r\n        const percentBottomPadding = 3;\r\n        const numWidth = Math.floor(getWidth().width / (array.length * 1.4));\r\n        const numMargin = this.getMargin();\r\n\r\n        return (\r\n            <div id=\"page\">\r\n                <div className=\"row\">\r\n                    <div className=\"menu-container\">\r\n                        <div className=\"menu\">\r\n                            <div className=\"makeArrayButton\" onClick={!inProgress ? () => this.makeArray(array.length - 1) : null}>Shuffle!</div>\r\n                            <div className=\"sliderContainer\">\r\n                                <div className=\"desc\">Change Array Size</div>\r\n                                <input type=\"range\" min=\"1\" max=\"250\" onChange={!inProgress ? this.handleSizeChange : null} className=\"slider\" />\r\n                            </div>\r\n                            <div className=\"sliderContainer\">\r\n                            <div className=\"desc\">Change Sorting Speed</div>\r\n                                <input type=\"range\" min=\"1\" max=\"75\" onChange={!inProgress ? this.handleSpeedChange : null} className=\"slider\" style={{direction: 'rtl'}} />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"row\">\r\n                    <div id=\"array-container\">\r\n                        {array.map((value, idx) => ( <div className=\"array-bar\" key={idx} style={{paddingBottom: `${percentBottomPadding}%`, height: `${value}px`, width: `${numWidth}px`, marginLeft: `${numMargin}px`, marginRight: `${numMargin}px`, backgroundColor: UNSORTED}} /> ))}\r\n                    </div>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"menu-container\">\r\n                        <div className=\"menu extra-padding\">\r\n                            <div className={algorithm === \"Selection\" ? \"selectedButton\" : \"button\"} onClick={!inProgress ? () => this.visualizeSelectionSort() : null}>Selection Sort</div>\r\n                            <div className={algorithm === \"Insertion\" ? \"selectedButton\" : \"button\"} onClick={!inProgress ? () => this.visualizeInsertionSort() : null}>Insertion Sort</div>\r\n                            <div className={algorithm === \"Bubble\" ? \"selectedButton\" : \"button\"} onClick={!inProgress ? () => this.visualizeBubbleSort() : null}>Bubble Sort</div>\r\n                            <div className={algorithm === \"Merge\" ? \"selectedButton\" : \"button\"} onClick={!inProgress ? () => this.visualizeMergeSort() : null}>Merge Sort</div>\r\n                            <div className={algorithm === \"Quick\" ? \"selectedButton\" : \"button\"} onClick={!inProgress ? () => this.visualizeQuickSort() : null}>Quick Sort</div>\r\n                            <div className={algorithm === \"Counting\" ? \"selectedButton\" : \"button\"} onClick={!inProgress ? () => this.visualizeCountingSort() : null}>Counting Sort</div>\r\n                            <div className={algorithm === \"Heap\" ? \"selectedButton\" : \"button\"} onClick={!inProgress ? () => this.visualizeHeapSort() : null}>Heap Sort</div>\r\n                            <div className={algorithm === \"Radix\" ? \"selectedButton\" : \"button\"} onClick={!inProgress ? () => this.visualizeRadixSort() : null}>Radix Sort</div>\r\n                            <div className={algorithm === \"Shell\" ? \"selectedButton\" : \"button\"} onClick={!inProgress ? () => this.visualizeShellSort() : null}>Shell Sort</div>\r\n                            <div className={algorithm === \"Cocktail\" ? \"selectedButton\" : \"button\"} onClick={!inProgress ? () => this.visualizeCocktailShakerSort() : null}>Cocktail Shaker Sort</div>\r\n                            <div className={algorithm === \"Gnome\" ? \"selectedButton\" : \"button\"} onClick={!inProgress ? () => this.visualizeGnomeSort() : null}>Gnome Sort</div>\r\n                            <div className={algorithm === \"Bitonic\" ? \"selectedButton\" : \"button\"} onClick={!inProgress ? () => this.visualizeBitonicSort() : null}>Bitonic Sort</div>\r\n                            <div className={algorithm === \"Comb\" ? \"selectedButton\" : \"button\"} onClick={!inProgress ? () => this.visualizeCombSort() : null}>Comb Sort</div>\r\n                            <div className={algorithm === \"Pancake\" ? \"selectedButton\" : \"button\"} onClick={!inProgress ? () => this.visualizePancakeSort() : null}>Pancake Sort</div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction randomInt(a, b) {\r\n    return Math.floor(Math.random() * (b - a + 1) + a);\r\n}\r\n\r\nfunction getWidth() {\r\n    const { innerWidth: width } = window;\r\n    return { width };\r\n}\r\n\r\nfunction getPadding() {\r\n    const { innerHeight: h } = window;\r\n    return h <= 1080 ? 2 :\r\n        h <= 1250 ? 5 : \r\n        h <= 1275 ? 12 :\r\n        h <= 1300 ? 17 :\r\n        h <= 1325 ? 25 : 35;\r\n}","import React from 'react';\nimport Visualizer from './Visualizer/Visualizer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Visualizer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}